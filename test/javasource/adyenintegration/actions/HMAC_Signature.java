// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package adyenintegration.actions;

import com.google.common.io.BaseEncoding;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.util.SortedMap;
import java.util.TreeMap;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

/**
 * 
 */
public class HMAC_Signature extends CustomJavaAction<String>
{
	private String HMAC_Key;
	private String merchantReference;
	private String paymentAmount;
	private String currencyCode;
	private String shipBeforeDate;
	private String skinCode;
	private String sessionValidity;
	private String merchantReturnData;
	private String shopperEmail;
	private String merchantAccount;

	public HMAC_Signature(IContext context, String HMAC_Key, String merchantReference, String paymentAmount, String currencyCode, String shipBeforeDate, String skinCode, String sessionValidity, String merchantReturnData, String shopperEmail, String merchantAccount)
	{
		super(context);
		this.HMAC_Key = HMAC_Key;
		this.merchantReference = merchantReference;
		this.paymentAmount = paymentAmount;
		this.currencyCode = currencyCode;
		this.shipBeforeDate = shipBeforeDate;
		this.skinCode = skinCode;
		this.sessionValidity = sessionValidity;
		this.merchantReturnData = merchantReturnData;
		this.shopperEmail = shopperEmail;
		this.merchantAccount = merchantAccount;
	}

	@Override
	public String executeAction() throws Exception
	{
		// BEGIN USER CODE
		 

		         
		       
		 
		        // Sort order is important (using natural ordering)
		        SortedMap<String, String> params = new TreeMap<>();
		        params.put("merchantReference", merchantReference);
		        params.put("paymentAmount", paymentAmount);
		        params.put("currencyCode", currencyCode);
		        params.put("shipBeforeDate", shipBeforeDate);
		        params.put("skinCode", skinCode);
		        params.put("merchantAccount", merchantAccount);
		        
		        
		        params.put("sessionValidity", sessionValidity);

		        params.put("shopperEmail", shopperEmail);
		        params.put("merchantReturnData", merchantReturnData);

		        // Calculate the data to sign
		        String signingData = paymentAmount + currencyCode + shipBeforeDate+ merchantReference + skinCode + 
		        		merchantAccount  + sessionValidity + shopperEmail + merchantReturnData;

		        
		        // Create the signature and add it to the parameter map
		        
		            return calculateHMAC(HMAC_Key,signingData);
		    
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "HMAC_Signature";
	}

	// BEGIN EXTRA CODE
    private static String escapeVal(String val) {
        if(val == null) { return ""; }
        return val.replace("\\", "\\\\").replace(":", "\\:");
    }
	
	/**
	 * Computes the Base64 encoded signature using the HMAC algorithm with the SHA-1 hashing function.
	 */
	private String calculateHMAC(String hmacKey, String signingString) throws GeneralSecurityException, UnsupportedEncodingException {
		SecretKeySpec keySpec = new SecretKeySpec(hmacKey.getBytes(), "HmacSHA1");
		Mac mac = Mac.getInstance("HmacSHA1");
		mac.init(keySpec);

		byte[] result = mac.doFinal(signingString.getBytes("UTF-8"));
		return BaseEncoding.base64().encode(result);
	}
	// END EXTRA CODE
}
